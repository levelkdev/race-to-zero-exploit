const _ = require('lodash')
const { ethTransaction } = require('./helpers.js')
const HackMe = artifacts.require("./HackMe.sol");
const BadBoy = artifacts.require("./BadBoy.sol");
let accounts, u1, u2, badBoy

function execWatch(c, fnName) {
  c[fnName]().watch((err, res) => {
    if(!err) {
      console.log("")
      console.log(`${fnName}: `, res.args)
      console.log("")
    } else {
      console.log(`${fnName} ERROR: `, err)
    }
  })
}

contract('HackMe and BadBoy', function(_accounts) {
  accounts = _accounts
  u1 = accounts[0]
  u2 = accounts[4]

  it('should get hacked real bad', async () => {
    const hackMe = await newHackMe()
    badBoy = await BadBoy.new(hackMe.address, { from: u2, value: toWei(1) })

    // execWatch(hackMe, 'BalanceChanged')
    // execWatch(hackMe, 'ExecuteWithdrawl')
    // execWatch(hackMe, 'SetZeroBalance')
    // execWatch(badBoy, 'BadBoyDefaultFuncCalled')
    // execWatch(badBoy, 'AddToHackMeBalance')

    console.log("")

    const ttx = await addFunds(hackMe, 'niceGuy', u1, 3)
    await logState(hackMe, badBoy)

    console.log('badBoy adds 1 ETH to hackMe')
    await ethTransaction(
      badBoy.addToHackMe(toWei(1))
    )
    await logState(hackMe, badBoy)

    console.log("badBoy executes recursive withdrawl and takes all the ETH!")
    const tx = await ethTransaction(
      badBoy.send()
    )
    await logState(hackMe, badBoy)

    assert.equal(getBalanceInEth(badBoy.address), 4)
  })

})

async function addFunds(hackMe, userName, user, amount) {
  const tx = await ethTransaction(
    hackMe.addToBalance({ from: user, value: toWei(amount) })
  )
  console.log(`${userName} adds ${amount} ETH to hackMe`)
  return tx
}

async function newHackMe () {
  return await HackMe.new()
}

async function logState(hackMe, badBoy) {
  console.log('')
  console.log('-------')
  await logHackMe(hackMe)
  logBadBoy(badBoy)
  console.log('-------')
  console.log('')
}

async function logHackMe(c) {
  console.log(`hackMe: ${getBalanceInEth(c.address)}`)
  console.log(`  balances`)
  console.log(`     niceGuy:  ${toEth(await c.getBalance.call(u1))}`)
  console.log(`     badBoy:   ${toEth(await c.getBalance.call(badBoy.address))}`)
}

function logBadBoy(c) {
  console.log(`badBoy: ${getBalanceInEth(c.address)}`)
}

function getBalanceInEth (address) {
  return toEth(web3.eth.getBalance(address).toNumber())
}

function toEth(n) {
  return web3.fromWei(n, 'ether')
}

function toWei(n) {
  return web3.toWei(n, 'ether')
}
